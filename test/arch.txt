园林名称,园中园编号,园中园名称,园中园区域属性,建筑编号,建筑名称,模型精度,构造,组合,斗口,出廊,收山,檩,描述1-形态,描述2-朝向,描述3-等级,描述4-楹,描述5-山墙,描述6-斗拱,描述7,明间,次间,二次间,三次间,通进深,檐步架,标注檐柱高,标注柱径,标注台明高,标注上出,标注下出,砖类别,瓦类别,石类别,踏跺类型,前檐装修明间,次间_1,次间_2,次间_3,后檐装修明间,次间_4,二次间_5,三次间_6,X坐标,Y坐标,Z坐标


# 内部调用序列：
# 1. main 初始化加载器，仅接收：朝代（默认值为qing+csv数据），调用生成器
# 2. generator 接收配置、调用calculator计算后的数据、调用assembler
# 3、calculator接收并计算loader格式化的数据，生成柱网平面矩阵，立面和剖面构件矩阵，为structure创建对象、组装和为geometry的bmesh创建提供数据
# 4. assembler 协调构建流程，调用systems的柱网、梁、屋顶组合工具（是否应增加单独的的柱、梁、椽构件对象生成模块？）
# 5. systems的柱网、梁、屋顶工具调用geometry对应的bmesh生成模块
# 6. bmesh生成构件网格对象
# 7. assembler 最终组装所有部件
# 8. 返回完整建筑对象

├── 1、main.py                    # 初始化加载器，仅接收csv数据、朝代（朝代信息作为未来扩展预留接口）
├── 2、generator.py               # 调度器，加载建筑配置，调用assembler
├── 3、structure/                 # **逻辑层**
│   ├── __init__.py
│   ├── collection.py          # **集合与父子关系**
│   ├── assembler.py           # **组装生成逻辑**，调用systems的梁、柱对象生成器
│   └── systems/               # 子系统
│       ├── pillar_net.py      # 柱网对象生成
│       ├── beam_frame.py      # 梁架对象生成
│       └── roof_system.py     # 屋顶对象生成
├── 4、core/                       # 核心逻辑
│   ├── __init__.py
│   ├── loader.py              # data数据加载
│   ├── calculator.py          # 尺寸计算
│
├── 5、geometry/                  # **bmesh几何生成**
│   ├── __init__.py
│   ├── pillar.py              # 柱子bmesh
│   ├── beam.py                # 梁bmesh  
│   ├── bracket.py             # 斗拱bmesh
│   ├── roof.py                # 屋顶bmesh
│   └── tenon.py               # 榫卯bmesh


先做一个简单的柱网模型流程，config做一个柱网配置信息，loader加载csv的数据信息（明间、次间、二次间、三次间、通进深、檐步架），naming_service标准化命名，geometry创建bmesh，mesh_pool检查网格池对象，structure创建对象
│