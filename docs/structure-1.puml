@startuml
skinparam style strictuml
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0

title 清式建筑建模系统 - 简化架构类关系

package core {
  class DataManager {
    - path: str
    - csv_data: list
    - headers: list
    + get_building_data(row_index: int): dict
    + calculate_dimensions(data: dict): dict
  }
}

package structure {
  class Assembler {
    - calc_data: dict
    - collection: Collection
    + build_building(): bpy.types.Object
  }

  class Collection {
    - basic_info: dict
    + create_garden_collection()
    + create_building_collection()
  }

  package components {
    class Pillar {
      + create_pillar_mesh(diameter, height)
      + build_grid(coords): list[bpy.types.Object]
    }

    class Beam {
      + create_beam(length, width, height)
    }

    class Roof {
      + create_roof(style)
    }
  }

  package systems {
    class PillarNet {
      + build_from_calc(calc_data: dict): list[bpy.types.Object]
    }

    class BeamFrame {
      + build_from_calc(calc_data: dict): list[bpy.types.Object]
    }

    class RoofSystem {
      + build_from_calc(calc_data: dict): list[bpy.types.Object]
    }
  }
}

package utils {
  class MeshPool {
    + get_or_create(name: str): bpy.types.Mesh
  }
}

class Generator {
  - data_manager: DataManager
  - assembler: Assembler
  - collection: Collection
  + prepare_data()
  + build_structure()
  + run()
}

' --- 关系定义 ---
Generator --> DataManager : uses
Generator --> Assembler : orchestrates
Generator --> Collection : initializes
Assembler --> Collection : uses
Assembler --> PillarNet : builds pillar net
Assembler --> BeamFrame : builds beam frame
Assembler --> RoofSystem : builds roof
PillarNet --> Pillar : uses
BeamFrame --> Beam : uses
RoofSystem --> Roof : uses
Pillar, Beam, Roof --> MeshPool : check mesh
@enduml
