test_arch/
│
├── configs/                   # 配置参数
│   ├── __init__.py
│   ├── config_manager.py      
│   ├── building_classification.toml    # 提供分类信息，用于识别建筑类型，提供大式、小式不同等级建筑的柱径比例和尺寸
│   └── app_settings.toml               # 提供系统行为设置
│
├── data/                        # 数据存储（CSV/XLS）
│   └── data2.csv                # 园林建筑基本数据，每一行代表一个建筑
│ 
├── core/
│   ├── data_loader.py            # 数据加载器，初步结构化数据，返回basic_info、structure_info、description_info、dimension_info
│   ├── component_calculator.py        # 数据计算，输入dimension_info，输出eave_diameter、eave_height、num_purlins、ridge_distance、x_grid、y_grid、pillars_coords、beams_coords、主要标高信息等建模需要的关键信息
│   └── __init__.py
│
├── structure/
│   ├── utils.py                # 含mesh_pool和collection_init功能，输入basic_info、structure_info，初始化集合，以及检查创建的mesh对象，如果bpy.data.meshes中有则返回，没有则创建
│   ├── assembler.py           # 输入主要标高信息和构件网格对象，组合功能创建组合，输入description_info（含 placement 功能 ）判断正房、厢房、倒座房
│   ├── frame/                #改名为 frame,与子模块统一名称
│   │   ├── pillar_frame.py       # 改名为pillar_frame，统一名称，输入pillars_coords、components对象，遍历位置创建柱网
│   │   ├── beam_frame.py
│   │   └── roof_system.py
│   ├── components/             #创建bmesh对象，返回mesh\object对象，不链接到集合
│   │   ├── pillar.py          # 输入eave_diameter、eave_height，返回檐柱对象，应考虑柱类，根据檐柱高柱径返回金柱、瓜柱、童柱等对象
│   │   ├── beam.py
│   │   ├── roof.py
│   │   └── __init__.py
│   └── __init__.py
│
├── tests/ 
│   └── test
│
├── generator.py               # 主生成器
├── main.py                    # 程序入口
│
│   ..........................................................
│
├── ai/                              # AI 扩展模块
│   ├── __init__.py
│   ├── param_fitter.py              # 参数拟合（根据数据预测斗口、坡度等）
│   ├── feature_extractor.py         # 特征提取（结构 + 装饰特征）
│   ├── layout_optimizer.py          # 平面与立面布局优化
│   └── style_transfer.py            # 风格迁移（唐/宋/清风格自动调整）
│
├── io/                              # 输入输出层（与外部系统对接）
│   ├── __init__.py
│   ├── ifc_exporter.py              # IFC/BIM 文件导出
│   ├── cad_exporter.py              # DWG/DXF 工程图导出
│   ├── svg_generator.py             # 草图生成（参数线稿）
│   ├── json_io.py                   # JSON、YAML 统一加载器
│   └── dataset_exporter.py          # 导出AI训练数据集
│
├── visualization/                   # 交互与展示层
│   ├── ui_panel.py
│   ├── component_panel.py
│   ├── preset_manager.py
│   ├── preview_renderer.py
│   └── engineering_drawer.py        # 生成工程图（线稿 + 尺寸）


这是一个使用blender api的传统木结构建筑生成项目，以上是项目设计架构，
项目中涉及大量的object\mesh\collection以及园林名称、建筑名称、建筑类型等，尤其是mesh会有大量复用，给我一个规范化的命名规则


├── data/                        # 数据存储（CSV/XLS）
│   └── data2.csv                # 园林建筑基本数据，每一行代表一个建筑
│ 
├── core/
│   ├── data_loader.py            # 数据加载器，初步结构化数据，返回basic_info、structure_info、description_info、dimension_info
│   ├── data_calculator.py        # 数据计算，输入dimension_info，输出eave_diameter、eave_height、num_purlins、ridge_distance、x_grid、y_grid、pillars_coords、beams_coords等
│   └── __init__.py
│
├── structure/
│   ├── utils.py                # 含mesh_pool和collection_init功能，输入basic_info、structure_info，初始化集合，以及检查创建的mesh对象，如果bpy.data.meshes中有则返回，没有则创建
│   ├── assembler.py           # 组合功能，输入description_info（含 placement 功能 ）判断正房、厢房、倒座房
│   ├── component_frame.py           # systems构件组合的逻辑，包含pillar_frame（pillar_net）、beam_frame、roof_frame等，是否需要创建统一的构造方法
│   ├── components/    # 
│   │   ├── pillar.py          # 内含 create_pillar_mesh() + build_grid()